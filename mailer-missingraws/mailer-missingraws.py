
# Import smtplib library to send email in python.
import smtplib
# Import MIMEText, MIMEImage and MIMEMultipart module.
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from email.utils import formataddr

import math
import os
import pandas as pd
import sys
import glob

import yaml
import base64

from jinja2 import Template

import mailtrap as mt

from pathlib import Path

# Files Needed
#  - cert-email-template.html
#  - cert-email-template.txt
#  - certs.csv (generated by build_certs) <!---- read this in from the config,yaml file and also read in the location of the files (currently hard coded)


send_noentries = False
send = True
test = False
lastwarning = False

exclude=[53798]

category_lookup = {
'GS': 'Grand Scenic',
'IL': 'Intimate Landscape',
'AD': 'Abstract and Details',
'P1': 'Project',
'P2': 'Project',
}

skip_user_ids = []

def send_email(user_id, datas, template=None):





    # Define the source and target email address.

    data = datas[0]
    strTo_name=data['name']



    if test:
        strTo_email = "info@timparkin.co.uk"
    else:
        strTo_email = data['email']


    mt_sender = mt.Address(email='info@naturallandscapeawards.com', name='Natural Landscape Photography Awards')
    mt_to = [mt.Address(email=strTo_email, name=strTo_name)]



    # Create an instance of MIMEMultipart object, pass 'related' as the constructor parameter.
    msgRoot = MIMEMultipart('related')
    # Set the email subject.
    if template:
        mt_subject = 'All your RAWS are uploaded'.format(strTo_name)
    else:
        mt_subject = 'Hi {}! You have missing RAWS!'.format(strTo_name)





    # Create a MIMEText object to contains the email Html content. There is also an image in the Html content. The image cid is image1.


    if template:
        txt_email = open('mailer-missingraws/mailer-missingraws-%s-template.html'%template).read()
    else:
        txt_email = open('mailer-missingraws/mailer-missingraws-template.html').read()




    items = []

    if not template:
        for n,d in enumerate(datas):
            items.append( '<li><h3>{} (id={})</h3><a href=""><img src="{}" width=600 /></a><br><br></li>'.format( d['category'], d['entry_id'], d['url'])  )


    header_text_1 = """
Don't Panic (yet!)
"""

    if lastwarning:
        header_text_1 = """
        24 Hours Left!!
        """

    if len(datas) > 1:
        entry_text = "entries"
    else:
        entry_text = "entry"

    header_text_2 = """
You have {} {} without RAW/Evidence files
""".format(len(datas),entry_text)

    if len(datas) > 1:
        intro_text_1 = """
We wanted to let you know that {} of your entries in the finals have no RAW/Evidence files<br><br>
    """.format(len(datas))
    else:
        intro_text_1 = """
We wanted to let you know that one of your entries in the finals has no RAW/Evidence files<br><br>
    """

    if template:
        main_text = """
Dear {},
<br><br>
This is just a quick email to confirm that each of your entries in the final rounds has at least one RAW file (or equivalent evidence) and you don't need to do anything else at this point.
<br><br>
Sincerely
<br><br>
Tim, Matt, Alex, and Rajesh
""".format(strTo_name)
    else:
        main_text = """
<div data-paragraph="true">No need to panic at the moment (maybe later!) but we thought it would be useful to let you know that you have a number of images without supporting evidence (RAW files, etc). You've stil got well over a week left to submit them.&nbsp;</div>
"""
        if lastwarning:
            main_text = """
            <div data-paragraph="true">The deadline is getting closer but you've still got just over 24 hours. If you've already told us about your circumstances, no need to reply, this is an automated post .&nbsp;</div>
        """


    bold_text = """
Your RAW/Evidence Files need uploading by August 15th
    """

    outro_text = ""

    if len(datas) > 1:
        images_text = "Here are the images that need one or more RAW/Evidence files"
    else:
        images_text = "Here is the image that needs one or more RAW/Evidence files"

    items_text = Template("""
    <div><br><br>
      <h3>{{images_text}}</h3>
        
      <ul id="certs" style="padding: 0px 18px 9px 30px; list-style-type: none; font-size: 14px; font-family: Roboto, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-style: normal; font-weight: normal; line-height: 125%; text-align: left;">
        {{ items }}
        </ul>
    </div>

    """).render({'images_text':images_text,'items':'\n'.join(items)})






    txt_email = Template(txt_email)

    if template:
        tdata = {
            'name': data['name'],
            'email': data['email'],
            'subject': msgRoot['Subject'],
            'main_text': main_text,
        }
    else:
        tdata =  {
            'name': data['name'],
            'email': data['email'],
            'user_id': data['id'],
            'subject': msgRoot['Subject'],
            'items_text': items_text,
            'header_text_1': header_text_1,
            'header_text_2': header_text_2,
            'intro_text_1': intro_text_1,
            'main_text': main_text,
            'bold_text': bold_text,
            'outro_text': outro_text,
            }


    if template:
        html_email = Template(open('mailer-missingraws/mailer-missingraws-%s-template.html'%template).read())
    else:
        html_email = Template(open('mailer-missingraws/mailer-missingraws-template.html').read())

    mt_html = html_email.render(**tdata)






    # Create a MIMEText object, this object contains the plain text content.
    if template:
        txt_email = open('mailer-missingraws/mailer-missingraws-%s-template.txt'%template).read()
    else:
        txt_email = open('mailer-missingraws/mailer-missingraws-template.txt').read()
    txt_email = Template(txt_email)

    mt_text = txt_email.render(**tdata)






    attach1 =  mt.Attachment(
            content=base64.b64encode(Path('mailer-missingraws/timmattalexrajesh.png').read_bytes()),
            filename="timmattalexrajesh.png",
            disposition=mt.Disposition.INLINE,
            mimetype="image/png",
            content_id="signature",
        )


    mail = mt.Mail(
        sender=mt_sender,
        to=mt_to,
        subject=mt_subject,
        text=mt_text,
        html=mt_html,
        attachments=[attach1],
        headers={"X-MT-Header": "Custom header"},
        custom_variables={"year": 2023},
    )



    client = mt.MailtrapClient(token="e46f57d10b2116dc442361d475500516")
    client.send(mail)




config = 'config.yaml'
with open(config) as f:
     yaml_data = yaml.safe_load(f)

yaml_args = yaml_data['args']

certs_csv = yaml_args['certs_csv']
full_csv = yaml_args['fullcsv']
cert_folder = yaml_args['cert_folder']





df = pd.read_csv(full_csv)
entry_by_user_id = {}
for i in range(len(df)):
    r = df.loc[i]
    id = r['id']
    if math.isnan(id):
        continue
    entry_id = r['entry_id']
    if id in entry_by_user_id:
        entry_by_user_id[id].append(r)
    else:
        entry_by_user_id[id] = [r]



# book contacts
df = pd.read_csv(yaml_args['missingrawscsv'], keep_default_na=False)

df2 = pd.read_csv(yaml_args['missingrawscsv'], keep_default_na=False)




entries_by_id = {}

# this is to skip onees alreeaedy sent. id's are produced by the code as general output
# Might be worth storing ID's in a file instead

# with open('missing_mandrill_emails.csv') as f:
#     mme = f.read().split()

#
# name	email	id	entry_id	filename	Url

all_emails = set()
for i in range(len(df)):

    r = df.loc[i]
    id = r['id']
    category = category_lookup[r['entry_category']]
    entry_id = r['entry_id']
    email = r['email']
    name = r['name']
    filename = r['entry_filename']
    url = 'https://submit.naturallandscapeawards.com%s'%r['entry_url']
    filesize = r['entry_photo_size']





    all_emails.add(email)
    data = {
        'email': email,
        'id': id,
        'category': category,
        'entry_id': entry_id,
        'filename': filename,
        'name': name,
        'url': url,
        }

    if id not in entries_by_id:
        entries_by_id[id] = [ data ]
    else:
        entries_by_id[id].append( data )


name_email_mapping = {}
for i in range(len(df2)):
    r = df2.loc[i]
    all_emails.add( r['email'])
    name_email_mapping[r['email']] = r['name']


print(len(all_emails))
count = 0
for user_id, data in entries_by_id.items():
    id = int(data[0]['id'])
    count=count+1
    all_emails.remove(data[0]['email'])
    if not send:
        continue
    if test:
        test_count = 0
        if test_count <3:
            print(data[0]['email'], data[0]['name'])
            send_email(user_id, data)
            test_count += 1
    else:
        # skip emails
        if email not in []:
            send_email(user_id, data)

print(count)

print(len(all_emails))


# for email in all_emails:
#     if send_noentries:
#         if test:
#             if email in 'cyclingbrian68@yahoo.co.uk':
#                 send_email([email], [{'name':name_email_mapping[ email ], 'email':email}],'apologies')
#         else:
#             send_email([email], [{'name': name_email_mapping[email], 'email': email}], 'apologies')
#             print(email)
