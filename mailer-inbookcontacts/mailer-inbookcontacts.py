
# Import smtplib library to send email in python.
import smtplib
# Import MIMEText, MIMEImage and MIMEMultipart module.
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from email.utils import formataddr

from pprint import pprint

import math
import os
import pandas as pd
import sys
import glob

import yaml
import mailtrap as mt
import base64
from pathlib import Path

from jinja2 import Template


# Files Needed
#  - cert-email-template.html
#  - cert-email-template.txt
#  - certs.csv (generated by build_certs) <!---- read this in from the config,yaml file and also read in the location of the files (currently hard coded)



TEST = False
YEAR = '2025'

def send_email(user_id, datas):



    is_project = False
    is_project_winner = False
    is_portfolio = False
    is_main_winner = False
    is_photo_of_the_year = False



    # for d in datas:
    #     pprint(d)
    #     if d['category'] == 'Projects':
    #         is_project = True
    #         if d['placing'] in ['Winner', 'Runner-Up', 'Third Place']:
    #             is_project_winner = True
    #
    #     if d['category'] == 'Photographer of the Year' and d['placing'] in ['Winner', 'Runner-Up'] :
    #         is_portfolio = True
    #     if 'Grand' in d['category'] or 'Intimate' in d['category'] or 'Abstract' in d['category']:
    #         if d['placing'] == 'Winner':
    #             is_main_winner = True
    #     if d['placing'] == 'Photograph of the Year, Winner':
    #         is_photo_of_the_year = True


    # Define the source and target email address.

    data = datas[0]

    strFrom = formataddr(('NLPA Team', 'info@naturallandscapeawards.com'))


    if TEST:
        strTo = 'info@timparkin.co.uk'
        #strTo = 'info@naturallandscapeawards.com'

    else:
        strTo = data['email']

    name = data['name']


    mt_sender = mt.Address(email='info@naturallandscapeawards.com', name='Natural Landscape Photography Awards')
    mt_to = [mt.Address(email=strTo, name=name)]

    # Create an instance of MIMEMultipart object, pass 'related' as the constructor parameter.

    # Set the email subject.
    mt_subject = f"⭐️IMPORTANT: You've been selected; Content now needed for the {YEAR} NLPA Book, "
    # Set the email from email address.





    # Create a MIMEText object to contains the email Html content. There is also an image in the Html content. The image cid is image1.
    html_email = Template(open('mailer-inbookcontacts/mailer-inbookcontacts-template.html').read())

    placing_mapping = {}
    for n,d in enumerate(datas):
        if d['placing'] is None or d['placing'] == 'None':
            d['placing'] = ''
        else:
            if 'Project' in d['category'] or 'Photographer' in d['category']:
                placing_mapping[ d['category'] ] = d['placing']




    items = []
    for n,d in enumerate(datas):
        if d['category'] in placing_mapping:
            placing = placing_mapping[d['category']]
        else:
            if d['placing']:
                placing = d['placing']

            else:
                placing = ''

        if placing == '':
            colon = ''
        else:
            colon = ' : '

        items.append('<li><h3>{}{}{} (id={})</h3><a href=""><img src="https://submit.naturallandscapeawards.com{}" width=600 /></a><br><br></li>'.format( d['category'], colon, placing, d['entry_id'], d['url']))



    header_text_1 = f"""
{name}, you're in the {YEAR} book
"""

    header_text_2 = f"""
{name}, you're in the {YEAR} Book
"""

    if len(datas) > 1:
        intro_text_1 = f"""
We wanted to let you know that a few of your images have been chosen for the {YEAR} NLPA book that is going to print in January. <span style="color: #700; font-style: bold;">We need all the content for the book by mid-December</span> which will allow us to finalise the selections.<br><br>
    """
    else:
        intro_text_1 = f"""
We wanted to let you know that one of your images has been chosen for the {YEAR} NLPA book that is going to print in January. <span style="color: #700; font-style: bold;">We need all the content for the book by mid-December</span> which will allow us to finalise the selections.<br><br>
    """

    preview = intro_text_1

    optional_text = """
We are producing an extended PDF to go with the book that will include your details and some of your thoughts on your picture<br><br>
The idea is that someone browsing the book can go into the PDF and get to know about the photographer and also get some background information on the picture.<br><br>

Here are a couple of examples of what we'd like a spreads in the Extended PDF to look like (thanks to Sarah Marino for the sample text). You can view a PDF of the spreads <a href="https://naturallandscapeawards.com/wp-content/uploads/2022/12/entrants-spreads.pdf">here</a>.<br><br>

<div style="text-align: center;"><a href="https://naturallandscapeawards.com/wp-content/uploads/2022/12/spreads.jpg"><img  alt="Certificates" style="display:block;" width="600" src="cid:image1"></a></div>

"""



    outro_text = """
We realise that writing something like this might not be something you've done before so we've put together a few resources to try to help you come up with ideas. We've created a Google document that includes a set of
questions that might prompt you for things to write about (don't feel the need to answer all of the questions.) <a href="https://docs.google.com/document/d/1F3s2Iu8EVduR7lZuDplGuN6XB59u7kKO5QJcULLO-C4/edit?usp=sharing">Google document for background and help</a>.<br><br>

We have designed a form which you should use to submit your information for each image (<a href="https://forms.gle/E8auDe482PTrWQxc7">submission form</a>). Please enter the image ID in the first field as shown in the list below.<br><br>

<h3>Check out Volume Two Extended PDF</h3>
We're also sharing the whole of Volume Two Extended PDF for you to have a look at for inspiration. (<a href="https://naturallandscapeawards.com/wp-content/uploads/volume-two-extended-download-183.pdf">Volume Two Extended PDF</a>).<br><br>

<h3>How to submit</h3>
We've added a list of the images you have included below. Please fill one form out for each image. For those of your who have projects and/or portfolios in the book - sorry about the extra work we're asking for but people will really appreciate learning more about your photos.<br><br>

One of the biggest tasks every year is chasing the last few contributors for the book, so if you could ensure the content is with us by 15th of December it would make the process a lot smoother.<br><br>

NB: If you are a main category winner, you may have already been asked for some content for the main book. The form is for extra content on top of this and an opportunity for you to write some more info about the picture and/or about how you work. This is all extra information to share with the world about your pictures.<br><br>

"""

    if is_main_winner:
        outro_text += """
<strong>One of your images is a main category winner</strong> which means your text will appear in the main book. The word count for the book is the same as for the extended PDF (about 300-500 words) so we can use the same text for the printed book and the extended PDF. We'll need the content by the 1st of January in order to get it ready for proof checking and printing please. <br><br>
I'll send you a separate email to you about this.<br><br>
        """

    if is_project:
        if is_project_winner:
            outro_text += """
    <strong>You have a project in the book so we will need a separate text to describe the project which will be about 300-500 words.</strong>. We'll need this content by the 1st of January in order to get it ready for proof checking and printing please.<br><br>

    For each of the project images, we'll also need a short description of approximately 50-70 words. Here's an example of what this would look like.<br><br>
    I'll send you a separate email to you about this.<br><br>
            """
        else:
            outro_text += """
    <strong>You have a project in the book so we will need a separate text to describe the project. We can use the text you submitted for the competition or you can rewrite it if you wish</strong>. We'll need this content by the 1st of January in order to get it ready for proof checking and printing please.<br><br>

    I'll send you a separate email to you about this.<br><br>
            """


    if is_portfolio:
        outro_text += """
<strong>You have a portfolio (photographer of the year) in the book. We'll need a block of text for this (what the competition means to you, etc) which will appear in print, approx 300-500 words</strong>. We'll need the content by the 1st of January in order to get it ready for proof checking and printing please.<br><br>

For each of the portfolio images, we'll also need a short description of approximately 50-70 words in addition to the full description to be included in the extended PDF. We'd also love to have a long description to go in the Extended PDF book if possible. I know writing five of these is quite a task but we think people will love the content.<br><br>
I'll send you a separate email to you about this to discuss.<br><br>
        """


    outro_text += """


Sincerely, <br><br>
Tim, Matt, Alex, and Rajesh
"""

    items_text = Template("""
    <div><br><br>
      <h3>Included Images</h3>
        <div style="text-align: left;"><span style="font-family:roboto,helvetica neue,helvetica,arial,sans-serif"><span style="font-size:14px">Please use the <a href="https://forms.gle/E8auDe482PTrWQxc7">form</a> to fill in the detail about your entry.</div>
      <ul id="certs" style="padding: 0px 18px 9px 30px; list-style-type: none; font-size: 14px; font-family: Roboto, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-style: normal; font-weight: normal; line-height: 125%; text-align: left;">
        {{ items }}
        </ul>
    </div>

    """).render({'items':'\n'.join(items)})







    tdata =  {
        'name': data['name'],
        'email': data['email'],
        'user_id': data['id'],
        'subject': mt_subject,
        'items_text': items_text,
        'header_text_1': header_text_1,
        'header_text_2': header_text_2,
        'intro_text_1': intro_text_1,
        'optional_text': optional_text,
        'outro_text': outro_text,
        }



    mt_html = html_email.render(**tdata)





    tdata =  {
        'name': data['name'],
        'email': data['email'],
        'user_id': data['id'],
        'subject': mt_subject,
        'items_text': items_text,
        'header_text_1': header_text_1.replace('<br><br>','').strip(),
        'header_text_2': header_text_2.replace('<br><br>','').strip(),
        'intro_text_1': intro_text_1.replace('<br><br>','').strip(),
        'optional_text': optional_text.replace('<br><br>','').strip(),
        'outro_text': outro_text.replace('<br><br>','').strip(),
        }

    # Create a MIMEText object, this object contains the plain text content.
    txt_email = open('mailer-inbookcontacts/mailer-inbookcontacts-template.txt').read()
    txt_email = Template(txt_email)

    mt_text = txt_email.render(**tdata)









    # # Open a file object to read the image file, the image file is located in the file path it provide.
    # target_filename = "spreads-600.jpg"
    # fp = open(target_filename, 'rb')
    # # Create a MIMEImage object with the above file object.
    # msgImage = MIMEImage(fp.read())
    # # Do not forget close the file object after using it.
    # fp.close()
    #
    # # Add 'Content-ID' header value to the above MIMEImage object to make it refer to the image source (src="cid:image1") in the Html content.
    # msgImage.add_header('Content-ID', '<image1>')
    # # Attach the MIMEImage object to the email body.
    # msgRoot.attach(msgImage)









    logo =  mt.Attachment(
            content=base64.b64encode(Path('mailer-inbookcontacts/logo.png').read_bytes()),
            filename="logo.png",
            disposition=mt.Disposition.INLINE,
            mimetype="image/png",
            content_id="logo",
        )

    attach1 =  mt.Attachment(
            content=base64.b64encode(Path('mailer-inbookcontacts/spreads-600.jpg').read_bytes()),
            filename="spreads-600.jpg",
            disposition=mt.Disposition.INLINE,
            mimetype="image/jpg",
            content_id="image1",
        )


    mail = mt.Mail(
        sender=mt_sender,
        to=mt_to,
        subject=mt_subject,
        text=mt_text,
        html=mt_html,
        attachments=[attach1,logo],
        headers={"X-MT-Header": "Custom header"},
        custom_variables={"year": 2025,"preview": preview},
    )

    client = mt.MailtrapClient(token="e46f57d10b2116dc442361d475500516")
    client.send(mail)




config = 'config.yaml'
with open(config) as f:
     yaml_data = yaml.safe_load(f)

yaml_args = yaml_data['args']

certs_csv = yaml_args['certs_csv']
full_csv = yaml_args['fullcsv']
cert_folder = yaml_args['cert_folder']




df = pd.read_csv(full_csv)
entry_by_user_id = {}
for i in range(len(df)):
    r = df.loc[i]
    id = r['id']
    if math.isnan(id):
        continue
    entry_id = r['entry_id']
    if id in entry_by_user_id:
        entry_by_user_id[id].append(r)
    else:
        entry_by_user_id[id] = [r]



df = pd.read_csv('mailer-inbookcontacts/winners.csv', keep_default_na=False)




# this is to skip onees alreeaedy sent. id's are produced by the code as general output
# Might be worth storing ID's in a file instead

# with open('missing_mandrill_emails.csv') as f:
#     mme = f.read().split()

#
# name	email	id	entry_id	filename	Url

winners_by_entryid = {}
for i in range(len(df)):

    r = df.loc[i]
    id = r['id']
    category = r['category']
    placing = r['prize']
    entry_id = r['entry_id']

    email = r['email']
    name = r['name']
    filename = r['filename']
    url = r['url']







    data = {
        'email': email,
        'id': id,
        'category': category,
        'placing': placing,
        'entry_id': entry_id,
        'filename': filename,
        'name': name,
        'url': url,

        }
    winners_by_entryid[ entry_id ] = data


# book contacts
df = pd.read_csv('mailer-inbookcontacts/book_entries.csv', keep_default_na=False)





entries_by_id = {}

# this is to skip onees alreeaedy sent. id's are produced by the code as general output
# Might be worth storing ID's in a file instead

# with open('missing_mandrill_emails.csv') as f:
#     mme = f.read().split()

#
# name	email	id	entry_id	filename	Url


for i in range(len(df)):

    r = df.loc[i]

    id = r['id']
    category = r['category']
    placing = r['prize']
    entry_id = r['entry_id']
    email = r['email']
    name = r['name']
    filename = r['filename']
    url = r['url']


    winner = winners_by_entryid.get( entry_id, {})
    placing = winner.get('placing')



    data = {
        'email': email,
        'id': id,
        'category': category,
        'placing': placing,
        'entry_id': entry_id,
        'filename': filename,
        'name': name,
        'url': url,
        }

    if id not in entries_by_id:
        entries_by_id[id] = [ data ]
    else:
        entries_by_id[id].append( data )




count = 0
for user_id, data in entries_by_id.items():

    id = int(data[0]['id'])
    name = data[0]['name']

    print(f'sending: {name}')
    count+=1

    send_email(user_id, data)

print(f"{count} photographers")