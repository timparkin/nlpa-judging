
# Import smtplib library to send email in python.
import smtplib
# Import MIMEText, MIMEImage and MIMEMultipart module.
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from email.utils import formataddr

import math
import os
import pandas as pd
import sys
import glob

import yaml
import base64

from jinja2 import Template

import mailtrap as mt

from pathlib import Path

# Files Needed
#  - cert-email-template.html
#  - cert-email-template.txt
#  - certs.csv (generated by build_certs) <!---- read this in from the config,yaml file and also read in the location of the files (currently hard coded)


send_noentries = True
send = True
test = False
def send_email(user_id, datas, template=None):





    # Define the source and target email address.

    data = datas[0]
    strTo_name=data['name']


    if test:
        strTo_email = "info@timparkin.co.uk"
        strTo_email = "info@naturallandscapeawards.com"
    else:
        strTo_email = data['email']


    mt_sender = mt.Address(email='info@naturallandscapeawards.com', name='Natural Landscape Photography Awards')
    mt_to = [mt.Address(email=strTo_email, name=strTo_name)]



    # Create an instance of MIMEMultipart object, pass 'related' as the constructor parameter.
    msgRoot = MIMEMultipart('related')
    # Set the email subject.
    if template:
        mt_subject = 'Regarding your NLPA Entries'.format(strTo_name)
    else:
        mt_subject = 'Congratulations {}! You got through to the Third Round!'.format(strTo_name)





    # Create a MIMEText object to contains the email Html content. There is also an image in the Html content. The image cid is image1.


    if template:
        txt_email = open('mailer-rawnotification/mailer-rawnotification-%s-template.html'%template).read()
    else:
        txt_email = open('mailer-rawnotification/mailer-rawnotification-template.html').read()




    items = []

    if not template:
        for n,d in enumerate(datas):
            items.append( '<li><h3>{} (id={})</h3><a href=""><img src="{}" width=600 /></a><br><br></li>'.format( d['category'], d['entry_id'], d['url'])  )

    if len(datas) > 1:
        images_text = "images"
    else:
        images_text = "image"

    header_text_1 = """
Congratulations!!
"""

    header_text_2 = """
You have {} {} in the third round
""".format(len(datas),images_text)

    if len(datas) > 1:
        intro_text_1 = """
We wanted to let you know that {} of your images have got through to round three of the competition.<br><br>
    """.format(len(datas))
    else:
        intro_text_1 = """
We wanted to let you know that one of your images has got through to round three of the competition.<br><br>
    """

    if template:
        main_text = """
Dear {},
<br><br>
Thank you so much for entering the Natural Landscape Photography Awards. Unfortunately this year your entries were unsuccessful. We, the organisers, have been rejected from competitions in the past and we know this can be disheartening. However it is important to recognise that judging is subjective and that the average standard of entries is very high.
<br><br>
Looking ahead, we are planning to run portfolio reviews once the competition concludes. This will provide an opportunity for participants to receive constructive feedback on their work, which we hope will be beneficial for anybody wanting to develop their photography skills.
<br><br>
Thank you once again for your participation in The Natural Landscape Photography Awards. Your passion for capturing the natural beauty of our world is evident, and we encourage you to keep exploring and pushing the boundaries of your creativity.
<br><br>
Thank you so much for taking part and please let us know if there is anything further we can do to help. 
<br><br>
Sincerely
<br><br>
Tim, Matt, Alex, and Rajesh
""".format(strTo_name)
    else:
        main_text = """
<div data-paragraph="true">We're happy to be able to tell you that one or more of your photographs have got through to our third round. Our judges now have a portfolio of everybody in the third round and are spending the next month reviewing them. In order to progress to the next round, we need to make sure we have your raw files to check the authenticity of the images.&nbsp;<br><br>11,223 images were entered into the competition and in the third round we have only 1,012 images in the Grand Scenic category, 1,115 in the Intimate Landscape category, 596 in the Abstract and Details category and 99 projects.&nbsp;<br>&nbsp;</div><div data-paragraph="true">If you log into the website, you should see which photographs have gone through and be able to upload one or more raw files for each. We also have a bit of extra information we'd like to collect so that we can tell the world more about your photos on our social media channel after the competition closes.&nbsp;</div>
"""

    bold_text = """
We need your RAW Files uploading by August 15th
    """

    outro_text = """
Our final judging is at the start of September and we'll be announcing winners on the September 15th and then we'll be hard at work designing the fourth volume of our very popular Natural Landscape Awards book!

Sincerely, <br><br>
Tim, Matt, Alex, and Rajesh
"""

    if len(datas) > 1:
        images_text = "Here are the images that have gone through to round three"
    else:
        images_text = "Here is the image that has gone through to round three"

    items_text = Template("""
    <div><br><br>
      <h3>{{images_text}}</h3>
        
      <ul id="certs" style="padding: 0px 18px 9px 30px; list-style-type: none; font-size: 14px; font-family: Roboto, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-style: normal; font-weight: normal; line-height: 125%; text-align: left;">
        {{ items }}
        </ul>
    </div>

    """).render({'images_text':images_text,'items':'\n'.join(items)})






    txt_email = Template(txt_email)

    if template:
        tdata = {
            'name': data['name'],
            'email': data['email'],
            'subject': msgRoot['Subject'],
            'main_text': main_text,
        }
    else:
        tdata =  {
            'name': data['name'],
            'email': data['email'],
            'user_id': data['id'],
            'subject': msgRoot['Subject'],
            'items_text': items_text,
            'header_text_1': header_text_1,
            'header_text_2': header_text_2,
            'intro_text_1': intro_text_1,
            'main_text': main_text,
            'bold_text': bold_text,
            'outro_text': outro_text,
            }


    if template:
        html_email = Template(open('mailer-rawnotification/mailer-rawnotification-%s-template.html'%template).read())
    else:
        html_email = Template(open('mailer-rawnotification/mailer-rawnotification-template.html').read())

    mt_html = html_email.render(**tdata)






    # Create a MIMEText object, this object contains the plain text content.
    if template:
        txt_email = open('mailer-rawnotification/mailer-rawnotification-%s-template.txt'%template).read()
    else:
        txt_email = open('mailer-rawnotification/mailer-rawnotification-template.txt').read()
    txt_email = Template(txt_email)

    mt_text = txt_email.render(**tdata)






    attach1 =  mt.Attachment(
            content=base64.b64encode(Path('mailer-rawnotification/timmattalexrajesh.png').read_bytes()),
            filename="timmattalexrajesh.png",
            disposition=mt.Disposition.INLINE,
            mimetype="image/png",
            content_id="signature",
        )


    mail = mt.Mail(
        sender=mt_sender,
        to=mt_to,
        subject=mt_subject,
        text=mt_text,
        html=mt_html,
        attachments=[attach1],
        headers={"X-MT-Header": "Custom header"},
        custom_variables={"year": 2023},
    )



    client = mt.MailtrapClient(token="e46f57d10b2116dc442361d475500516")
    client.send(mail)




config = 'config.yaml'
with open(config) as f:
     yaml_data = yaml.safe_load(f)

yaml_args = yaml_data['args']

certs_csv = yaml_args['certs_csv']
full_csv = yaml_args['fullcsv']
cert_folder = yaml_args['cert_folder']





df = pd.read_csv(full_csv)
entry_by_user_id = {}
for i in range(len(df)):
    r = df.loc[i]
    id = r['id']
    if math.isnan(id):
        continue
    entry_id = r['entry_id']
    if id in entry_by_user_id:
        entry_by_user_id[id].append(r)
    else:
        entry_by_user_id[id] = [r]



# book contacts
df = pd.read_csv(yaml_args['rawrequests'], keep_default_na=False)

df2 = pd.read_csv(yaml_args['fullcsv'], keep_default_na=False)




entries_by_id = {}

# this is to skip onees alreeaedy sent. id's are produced by the code as general output
# Might be worth storing ID's in a file instead

# with open('missing_mandrill_emails.csv') as f:
#     mme = f.read().split()

#
# name	email	id	entry_id	filename	Url

all_emails = set()
for i in range(len(df)):

    r = df.loc[i]
    id = r['id']
    category = r['category']
    entry_id = r['entry_id']
    email = r['email']
    name = r['name']
    filename = r['filename']
    url = r['Url']


    all_emails.add(email)
    data = {
        'email': email,
        'id': id,
        'category': category,
        'entry_id': entry_id,
        'filename': filename,
        'name': name,
        'url': url,
        }

    if id not in entries_by_id:
        entries_by_id[id] = [ data ]
    else:
        entries_by_id[id].append( data )


name_email_mapping = {}
for i in range(len(df2)):
    r = df2.loc[i]
    all_emails.add( r['email'])
    name_email_mapping[r['email']] = r['name']


print(len(all_emails))
count = 0
for user_id, data in entries_by_id.items():
    id = int(data[0]['id'])
    count=count+1
    all_emails.remove(data[0]['email'])
    if not send:
        continue
    if test:
        if id in [235,379,6197]: #
            print(data[0]['email'], data[0]['name'])
            send_email(user_id, data)
    else:
        send_email(user_id, data)

print(count)

print(len(all_emails))


for email in all_emails:
    if send_noentries:
        if test:
            if email in 'info+dsflkhasdlasasdfasdfgh@timparkin.co.uk':
                send_email([email], [{'name':name_email_mapping[ email ], 'email':email}],'apologies')
        else:
            send_email([email], [{'name': name_email_mapping[email], 'email': email}], 'apologies')
            print(email)