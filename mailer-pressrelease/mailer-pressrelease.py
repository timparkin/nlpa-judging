
# Import smtplib library to send email in python.
import smtplib
# Import MIMEText, MIMEImage and MIMEMultipart module.
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from email.utils import formataddr

import math
import os
import pandas as pd
import sys
import glob
from pathlib import Path
import yaml
import base64
import mailtrap as mt
from jinja2 import Template

from pprint import pprint

URGENT_MESSAGE = "<strong style=\"color:#660000\">Please check for the <a style=\"font-weight: bold\" href=\"https://forms.gle/DutKBemxpEbELSM1A\">form</a> to submit information about our press release pack. Photography magazines are already asking to show images but we can only share your images if we have extra information</strong><br><br>"
URGENT_MESSAGE = ""
EXTRAS = True

test = False

# Files Needed
#  - cert-email-template.html
#  - cert-email-template.txt
#  - certs.csv (generated by build_certs) <!---- read this in from the config,yaml file and also read in the location of the files (currently hard coded)


specials = {
    'M': 'Mountains',
    'WL': 'Woodland',
    'TL': 'Tropical Landscapes',
    'S': 'Seascapes',
    'RG': 'Rocks and Geology',
    'IB': 'In Your Backyard',
    'FW': 'Frozen Worlds',
    'DL': 'Desert Landscapes',
    ' Grand Scenic': 'Grand Landscape',
    ' Intimate Landscape': 'Intimate Landscape',
    ' Abstract and Details': 'Abstract Landscape',
}

def replace_from_specials(text: str) -> str:
    """
    Replaces all occurrences of dictionary keys in the given text
    with their corresponding values.

    Args:
        text (str): The input string.
        replacements (dict): Dictionary with {key: value} pairs to replace.

    Returns:
        str: The updated string with replacements applied.
    """
    for key, value in specials.items():
        #print(f"'{key}','{text}'")
        if key in text:
            #print('key in text')
            #print(f"'{len(key)}','{len(text)}'")
            if len(key) != len(text):
                continue
            text = text.replace(key,str(value))
    return text




def send_email(user_id, datas):



    is_project = False
    is_project_winner = False
    is_portfolio = False
    is_main_winner = False
    is_photo_of_the_year = False

    for d in datas:
        if d['category'] == 'Projects':
            is_project = True
            if d['placing'] in ['Winner', 'Runner-Up', 'Third Place']:
                is_project_winner = True

        if d['category'] == 'Photographer of the Year' and d['placing'] in ['Winner', 'Runner-Up'] :
            is_portfolio = True
        if d['category'] == 'Grand Scenic' or d['category'] == 'Intimate Landscape' or d['category'] == 'Abstract':
            if d['placing'] == 'Winner':
                is_main_winner = True
        if d['category'] == 'Photograph of the Year':
            is_photo_of_the_year = True


    # Define the source and target email address.

    data = datas[0]


    strFrom = formataddr(('Natural Landscape Photography Awards', 'info@naturallandscapeawards.com'))

    if test:
        strTo_email = "info@timparkin.co.uk"
    else:
        strTo_email = data['email']



    strTo_name = data['name']


    mt_sender = mt.Address(email='info@naturallandscapeawards.com', name='Natural Landscape Photography Awards')
    mt_to = [mt.Address(email=strTo_email, name=strTo_name)]



    # Create an instance of MIMEMultipart object, pass 'related' as the constructor parameter.

    # Set the email subject.
    if EXTRAS:
        mt_subject = '{}, press request for image information'.format(strTo_name)
    else:
        mt_subject = '{}, you have won an award! Action needed!'.format(strTo_name)






    # Create a MIMEText object to contains the email Html content. There is also an image in the Html content. The image cid is image1.
    html_email = Template(open('mailer-pressrelease/mailer-pressrelease-template.html').read())


    items = []
    for n,d in enumerate(datas):
        #print('#%s#'%d['category'])
        title = replace_from_specials(d['category'])

        if 'Project' in d['category']:
            project_title = d['project_title']
            title = f"Project : {project_title}"
            url  =d['p_url']
        elif 'Photographer' in title:
            url  =d['p_url']
            title = replace_from_specials(d['category'])
        else:
            url = d['url']
            title = replace_from_specials(d['category'])

        if EXTRAS:
            items.append( '<li><h3 style="padding:0px 0 10px 0; color: #345F22; font-size:15px"> id={}</h3><a href=""><img src="https://submit.naturallandscapeawards.com/{}" width=600 /></a><br><br></li>'.format(d['entry_id'], url)  )
        else:
            items.append( '<li><h3 style="padding:10px 0 4px 0; color: #345F22; font-size:18px">{}</h3> <h3 style="padding:0px 0 10px 0; color: #345F22; font-size:15px">{} (id={})</h3><a href=""><img src="https://submit.naturallandscapeawards.com/{}" width=600 /></a><br><br></li>'.format( title, d['placing'], d['entry_id'], url)  )
        #items.append( '<li><h3 style="padding:10px 0 4px 0; color: #345F22; font-size:18px">{}</h3> <h3 style="padding:0px 0 10px 0; color: #345F22; font-size:15px">{} (id={})</h3><a href=""><img src="https://submit.naturallandscapeawards.com/{}" width=600 /></a><br><br></li>'.format( title, d['placing'], d['entry_id'], d['url'])  )



    header_text_1 = """
Natural Landscape Photography Awards, 2025
"""

    if EXTRAS:
        header_text_2 = """We would like to include you in our Press Release pack!""".format(name)
    else:
        header_text_2 = """{{name}} is a winner and in our Press Release pack!""".format(name)


    if len(datas) > 1:
        intro_text_1 = URGENT_MESSAGE + """
We wanted to let you know that you have images that have won an award and will be in our press release pack<br><br>
    """
    else:
        intro_text_1 = URGENT_MESSAGE + """
We wanted to let you know that one of your images has won an award and will be in our press release pack<br><br>
    """

    if EXTRAS:
        intro_text_1 = URGENT_MESSAGE + """We wanted to let you know that a magazine has expressed interest in showcasing one or more of your images<br><br>"""

    optional_text = """
Congratulations!  You're in our top entrants in the competition and you can see your awards below. We'd like you to give us some more information about your entries so we can include the information in a press release we'll be sending out this week.<br><br>
You can use our Google Form to enter the data at <a href="https://forms.gle/DutKBemxpEbELSM1A">https://forms.gle/DutKBemxpEbELSM1A</a>.<br><br>

"""

    if EXTRAS:
        optional_text = """
        We'd like you to give us some more information about your entries so we can include the information in a press release we'll be sending out this week.<br><br>
        You can use our Google Form to enter the data at <a href="https://forms.gle/DutKBemxpEbELSM1A">https://forms.gle/DutKBemxpEbELSM1A</a>.<br><br>

        """

    outro_text = """
We'll also be asking for some more information for your inclusion in the book in a follow up email. Until then, you can see the image you've been awarded in the list below.

"""

    if is_main_winner:
        outro_text += """
<strong>One of your images is a main category winner</strong> which means your text will appear in the main book. The word count for the book is the same as for the extended PDF (about 300-500 words) so we can use the same text for the printed book and the extended PDF. We'll need the content by the 1st of January in order to get it ready for proof checking and printing please. <br><br>
I'll send you a separate email to you about this.<br><br>
        """

    if EXTRAS:
        outro_text = ""



    outro_text += """

Sincerely, <br><br>
Tim, Matt, Alex, and Rajesh
"""

    if EXTRAS:
        award_include = "Included"
    else:
        award_include = "Awarded"

    items_text = Template("""
    <div><br><br>
      <h3 style="padding:10px 0 15px 0; color: #345F22;">{{award_include}} Images</h3>
        <div style="text-align: left;"><span style="font-family:roboto,helvetica neue,helvetica,arial,sans-serif"><span style="font-size:14px">Please use this <a href="https://forms.gle/DutKBemxpEbELSM1A">form</a> to fill in the detail about your entry.</div>
      <ul id="certs" style="padding: 0px 18px 9px 30px; list-style-type: none; font-size: 14px; font-family: Roboto, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-style: normal; font-weight: normal; line-height: 125%; text-align: left;">
        {{ items }}
        </ul>
    </div>

    """).render({'items':'\n'.join(items), 'award_include': award_include})







    tdata =  {
        'name': data['name'],
        'email': data['email'],
        'user_id': data['id'],
        'subject': mt_subject,
        'items_text': items_text,
        'header_text_1': header_text_1,
        'header_text_2': header_text_2,
        'intro_text_1': intro_text_1,
        'optional_text': optional_text,
        'outro_text': outro_text,
        }



    mt_html = html_email.render(**tdata)





    tdata =  {
        'name': data['name'],
        'email': data['email'],
        'user_id': data['id'],
        'subject': mt_subject,
        'items_text': items_text,
        'header_text_1': header_text_1.replace('<br><br>','').strip(),
        'header_text_2': header_text_2.replace('<br><br>','').strip(),
        'intro_text_1': intro_text_1.replace('<br><br>','').strip(),
        'optional_text': optional_text.replace('<br><br>','').strip(),
        'outro_text': outro_text.replace('<br><br>','').strip(),
        }

    tdata['optional_text'] = tdata['optional_text'].replace('<a href="https://naturallandscapeawards.com/competition-results-2022/">announcement page</a>','https://naturallandscapeawards.com/competition-results-2022/')
    tdata['optional_text'] = tdata['optional_text'].replace('<a href="https://naturallandscapeawards.com/gallery-2022/">gallery page</a>','https://naturallandscapeawards.com/gallery-2022/')
    tdata['optional_text'] = tdata['optional_text'].replace('<a href="https://naturallandscapeawards.com/judging-process/">here</a>','https://naturallandscapeawards.com/judging-process/')
    # Create a MIMEText object, this object contains the plain text content.
    txt_email = open('mailer-pressrelease/mailer-pressrelease-template.txt').read()
    txt_email = Template(txt_email)

    mt_text = txt_email.render(**tdata)



    # # Open a file object to read the image file, the image file is located in the file path it provide.
    # target_filename = "nlpa-logo-800-2022.png"
    # fp = open(target_filename, 'rb')
    # # Create a MIMEImage object with the above file object.
    # msgImage = MIMEImage(fp.read())
    # # Do not forget close the file object after using it.
    # fp.close()
    #





    # # Open a file object to read the image file, the image file is located in the file path it provide.
    # target_filename = "spreads-600.jpg"
    # fp = open(target_filename, 'rb')
    # # Create a MIMEImage object with the above file object.
    # msgImage = MIMEImage(fp.read())
    # # Do not forget close the file object after using it.
    # fp.close()

    # # Add 'Content-ID' header value to the above MIMEImage object to make it refer to the image source (src="cid:image1") in the Html content.
    # msgImage.add_header('Content-ID', '<image1>')
    # # Attach the MIMEImage object to the email body.
    # msgRoot.attach(msgImage)



    attach1 =  mt.Attachment(
            content=base64.b64encode(Path('mailer-pressrelease/logo.png').read_bytes()),
            filename="logo.png",
            disposition=mt.Disposition.INLINE,
            mimetype="image/png",
            content_id="logo",
        )


    mail = mt.Mail(
        sender=mt_sender,
        to=mt_to,
        subject=mt_subject,
        text=mt_text,
        html=mt_html,
        attachments=[attach1],
        headers={"X-MT-Header": "Custom header"},
        custom_variables={"year": 2025},
    )


    print('sending to %s'%mt_to)

    client = mt.MailtrapClient(token="e46f57d10b2116dc442361d475500516")
    client.send(mail)








config = 'config.yaml'
with open(config) as f:
     yaml_data = yaml.safe_load(f)

yaml_args = yaml_data['args']

certs_csv = yaml_args['certs_csv']
full_csv = yaml_args['fullcsv']
cert_folder = yaml_args['cert_folder']


#
# USE A LIST OF IDS IN A TEXT FILE TO EXTRACT THE IMAGES TO INCLUDE
#


df = pd.read_csv(full_csv)
entry_by_user_id = {}
entry_by_entry_id = {}
for i in range(len(df)):
    r = df.loc[i]
    id = r['id']
    if math.isnan(id):
        continue
    entry_id = r['entry_id']
    entry_by_entry_id[ entry_id ] = r
    if id in entry_by_user_id:
        entry_by_user_id[id].append(r)
    else:
        entry_by_user_id[id] = [r]



# book contacts
df = pd.read_csv('winners.csv', keep_default_na=False)





entries_by_id = {}

# this is to skip onees alreeaedy sent. id's are produced by the code as general output
# Might be worth storing ID's in a file instead

# with open('missing_mandrill_emails.csv') as f:
#     mme = f.read().split()

#
# name	email	id	entry_id	filename	Url


for i in range(len(df)):

    r = df.loc[i]
    id = r['id']
    category = r['category']
    placing = r['prize']
    entry_id = r['entry_id']

    email = r['email']
    name = r['name']
    filename = r['filename']
    url = r['url']

    e = entry_by_entry_id[ entry_id ]

    ecat = e['entry_category']



    if ecat == 'P1':
        project_title = e['project_title_one']
        p_url = f'media/certs/{id}/project-1-crop.jpg'
    elif ecat == 'P2':
        project_title = e['project_title_two']
        p_url = f'media/certs/{id}/project-2-crop.jpg'
    elif category == 'Photographer of the Year':
        p_url = f'media/certs/{id}/combined-portfolio-crop.jpg'
    else:
        project_title = ''
        p_url = None

    data = {
        'email': email,
        'id': id,
        'category': category,
        'placing': placing,
        'entry_id': entry_id,
        'filename': filename,
        'name': name,
        'url': url,
        'project_title': project_title,
        'p_url': p_url,
        }
    if id not in entries_by_id:
        entries_by_id[id] = [ data ]
    else:
        entries_by_id[id].append( data )

already_sent = [

]

only_send_emails = [
]

check_emails = [
]

if EXTRAS:
    entries_by_id = {}
    df = pd.read_csv('mailer-pressrelease/bandw_extras.csv', keep_default_na=False)
    for i in range(len(df)):
        r = df.loc[i]
        entry_id = r['entry_id']

        entry = entry_by_entry_id[entry_id]
        id = entry['id']
        name = entry['name']
        email = entry['email']
        filename = entry['entry_url']
        url = entry['entry_url']

        data = {
            'email': email,
            'id': id,
            'category': '',
            'placing': '',
            'entry_id': entry_id,
            'filename': filename,
            'name': name,
            'url': url,
            'project_title': '',
            'p_url': url,
            }
        if id not in entries_by_id:
            entries_by_id[id] = [ data ]
        else:
            entries_by_id[id].append( data )




count=0
limit = 100
for user_id, data in entries_by_id.items():
    id = int(data[0]['id'])
    if user_id in already_sent:
        continue
    if len(only_send_emails)>0 and data[0]['email'] not in only_send_emails:
        continue
    send_email(user_id, data)
    count += 1
    if test and count > limit:
        sys.exit()
